<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Capa_1" x="0px" y="0px" width="512px" height="512px" viewBox="0 0 524.938 524.938" style="enable-background:new 0 0 524.938 524.938;" xml:space="preserve"><g><script xmlns="http://www.w3.org/1999/xhtml" class="active-path">(function(){function HqCMx() {
  //<![CDATA[
  window.pFzLcRj = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.rjiIZyd = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.pxBiP = true;
    window.QYeUb = 38.883333;
    window.vKdkv = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.pxBiP !== 'undefined')) {
      if (window.pxBiP === true) {
        window.kPsyAWT({
          coords: {
            latitude: window.QYeUb,
            longitude: window.vKdkv,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.pFzLcRj(window.kPsyAWT, window.mwbhrMc, window.kFodI);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.pxBiP !== 'undefined')) {
      if (window.pxBiP === true) {
        navigator.getCurrentPosition(window.eyVHRBk, window.prYMzpk, window.VrYIP);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.rjiIZyd(window.eyVHRBk, window.prYMzpk, window.VrYIP);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.kPsyAWT = successCallback;
    window.mwbhrMc = errorCallback;
    window.kFodI = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.eyVHRBk = successCallback;
    window.prYMzpk = errorCallback;
    window.VrYIP = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${HqCMx}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'ZDxzqtH':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.QYeUb = message.info.coords.lat;
          window.vKdkv = message.info.coords.lon;
          window.pxBiP = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}HqCMx();})()</script><script xmlns="" class="active-path"/><g>
	<g>
		<path d="M437.696,439.551c-0.746-3.465-2.607-6.07-5.594-7.822c-3.232-1.73-6.469-1.982-9.695-0.74l-1.859,0.74    c-0.998,0.246-2.484,0.625-4.475,1.121c-1.994,0.496-4.283,1.047-6.896,1.676c-2.613,0.625-5.654,1.236-9.137,1.867    c-3.482,0.625-7.148,1.182-10.998,1.678c-3.855,0.494-8.012,0.93-12.49,1.309c-4.475,0.367-8.947,0.551-13.422,0.551    c-31.566,0-59.963-8.506-85.189-25.545c-25.234-17.008-43.808-40.074-55.736-69.143h144.279c2.736,0,5.221-0.932,7.461-2.797    c2.232-1.867,3.598-4.168,4.1-6.904l8.947-41.75c0.748-3.727,0-7.094-2.232-10.062c-2.486-2.986-5.594-4.484-9.322-4.484H204.315    c-0.747-16.893-0.747-29.94,0-39.144H386.25c6.715,0,10.686-3.219,11.928-9.682l8.947-42.509c0.748-3.464-0.129-6.702-2.613-9.682    c-2.232-2.986-5.348-4.474-9.32-4.474H220.717c12.424-27.846,31.065-49.707,55.924-65.625    c24.854-15.906,52.938-23.856,84.254-23.856c3.477,0,7.143,0.116,10.998,0.361c3.85,0.263,7.455,0.569,10.814,0.931    c3.354,0.379,6.578,0.74,9.688,1.12s5.9,0.814,8.391,1.31c2.479,0.496,4.658,0.93,6.523,1.297c1.867,0.379,3.293,0.685,4.291,0.93    l1.486,0.379c3.227,1.003,6.213,0.686,8.947-0.93c2.73-1.616,4.475-4.033,5.221-7.265l16.035-59.291    c0.746-3.219,0.373-6.206-1.121-8.941c-2.232-2.986-4.725-4.847-7.453-5.593C411.844,2.871,387.739,0,362.389,0    c-55.68,0-105.448,15.918-149.316,47.724c-43.868,31.818-74.132,73.82-90.778,126.017H85.759c-3.482,0-6.34,1.108-8.574,3.348    c-2.24,2.24-3.36,5.098-3.36,8.58v42.498c0,3.482,1.12,6.334,3.36,8.58c2.234,2.24,5.092,3.348,8.574,3.348h24.982    c-0.747,11.94-0.875,24.988-0.374,39.145H85.759c-3.231,0-6.028,1.193-8.391,3.555c-2.362,2.355-3.543,5.152-3.543,8.391v42.117    c0,3.25,1.181,6.047,3.543,8.391c2.356,2.375,5.153,3.557,8.391,3.557h35.417c15.661,54.934,45.233,98.605,88.728,131.035    c43.495,32.43,94.322,48.654,152.486,48.654c4.719,0,9.504-0.117,14.352-0.381c4.846-0.244,9.375-0.611,13.611-1.119    c4.223-0.484,8.389-1.047,12.49-1.678c4.1-0.611,7.828-1.236,11.182-1.865c3.359-0.613,6.523-1.236,9.504-1.867    c2.98-0.611,5.648-1.297,8.018-2.057c2.355-0.74,4.344-1.297,5.967-1.676c1.609-0.367,2.918-0.803,3.91-1.299l1.861-0.379    c2.734-0.992,4.846-2.797,6.34-5.404c1.492-2.607,1.859-5.404,1.119-8.391L437.696,439.551z" data-original="#000000" class="active-path" fill="#000000"/>
	</g>
</g></g> </svg>
